<!-- <h1>Sentiment analysis test</h1> -->
<style>
	body {
		background-color: #000000;
		margin: 0px;
		overflow: hidden;
		cursor:none;
	}

	a {
		color:#0078ff;
	}
</style>
<script src="/js/display/three.min.js"></script>


<div class="halo ring-1"></div>
<div class="halo ring-2"></div>
<div class="halo ring-3"></div>
<div class="halo ring-4"></div>
<div class="halo ring-5"></div>
<div class="halo ring-6"></div>
<div class="halo ring-7"></div>
<div class="halo ring-8"></div>
<script>

	var mouseX = 0, mouseY = 0,

	windowHalfX = window.innerWidth / 2,
	windowHalfY = window.innerHeight / 2,

	SEPARATION = 200,
	AMOUNTX = 10,
	AMOUNTY = 10,

	camera, scene, renderer;

	init();
	animate();

	function init() {

		var container, separation = 100, amountX = 50, amountY = 50,
		particles, particle;

		container = document.createElement('div');
		document.body.appendChild(container);

		camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
		camera.position.z = 100;

		scene = new THREE.Scene();

		//scene.position.x = 500;

		renderer = new THREE.CanvasRenderer();
		renderer.setSize( window.innerWidth, window.innerHeight );
		container.appendChild( renderer.domElement );

		// particles

		var PI2 = Math.PI * 2;
		var material = new THREE.SpriteCanvasMaterial( {

			color: 0xffffff,
			program: function ( context ) {

				context.beginPath();
				context.arc( 0, 0, 1, 0, PI2, true );
				context.fill();

			}

		} );

		var geometry = new THREE.Geometry();

		for ( var i = 0; i < 100; i ++ ) {

			particle = new THREE.Sprite( material );
			particle.position.x = Math.random() * 2 - 1;
			particle.position.y = Math.random() * 2 - 1;
			particle.position.z = Math.random() * 2 - 1;
			particle.position.normalize();
			particle.position.multiplyScalar( Math.random() * 10 + 450 );
			particle.scale.x = particle.scale.y = 5;
			scene.add( particle );

			geometry.vertices.push( particle.position );

		}

		// lines

		var line = new THREE.Line( geometry, new THREE.LineBasicMaterial( { color: 0xffffff, opacity: 0.4 } ) );
		scene.add( line );

		document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		document.addEventListener( 'touchstart', onDocumentTouchStart, false );
		document.addEventListener( 'touchmove', onDocumentTouchMove, false );

		//

		window.addEventListener( 'resize', onWindowResize, false );

	}

	function onWindowResize() {

		windowHalfX = window.innerWidth / 2;
		windowHalfY = window.innerHeight / 2;

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize( window.innerWidth, window.innerHeight );

	}

	//

	function onDocumentMouseMove(event) {

		mouseX = event.clientX - windowHalfX;
		mouseY = event.clientY - windowHalfY;

	}

	function onDocumentTouchStart( event ) {

		if ( event.touches.length > 1 ) {

			event.preventDefault();

			mouseX = event.touches[ 0 ].pageX - windowHalfX;
			mouseY = event.touches[ 0 ].pageY - windowHalfY;

		}

	}

	function onDocumentTouchMove( event ) {

		if ( event.touches.length == 1 ) {

			event.preventDefault();

			mouseX = event.touches[ 0 ].pageX - windowHalfX;
			mouseY = event.touches[ 0 ].pageY - windowHalfY;

		}

	}

	//

	function animate() {

		requestAnimationFrame( animate );

		render();

	}

	function render() {


		var positions = JSON.parse( localStorage.getItem('positions') );

		// camera.position.x += ( positions.translateX - camera.position.x ) * .05;
		// camera.position.y += ( - positions.translateY + 200 - camera.position.y ) * .05;
		//camera.position.z = ( 4 - positions.scale) * 200;

		camera.position.x += ( mouseX - camera.position.x ) * .05;
		camera.position.y += ( - mouseY + 200 - camera.position.y ) * .05;


		camera.lookAt( scene.position );

		renderer.render( scene, camera );

	}

</script>