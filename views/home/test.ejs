<!-- <h1>Sentiment analysis test</h1> -->
<style>
	body {
		background-color: #000000;
		margin: 0px;
		overflow: hidden;
		/*cursor:none;*/
	}

	.showTutorial {
		left:13%;
		top: 75%;
		-webkit-transform: scale(2);
	}
}
</style>
<script src="/js/display/three.min.js"></script>
<script src="/js/display/Tween.js"></script>
<script src="/js/display/velocity.js"></script>

<div class="content hidden">
	<div class="content-body"></div>
</div>

<div class="stats hidden">
	<div class="links">
		<a class="test one">Origin</a>
		<a class="test two">Task</a>
		<a class="test three">Depth</a>
	</div>
	<div style="padding-left:20px; padding-top:20px;">Interim</div>
	<textarea id="speech-page-content" style="" name="pageContent" ></textarea>
	<div style="padding-left:20px; padding-top:20px;">Result</div>
	<textarea type="text" class="text" style=""></textarea>
</div>

<div class="container">
<div class="halo ring-1"></div>
<div class="halo ring-2"></div>
<div class="halo ring-3"></div>
<div class="halo ring-4"></div>
<div class="halo ring-5"></div>
<div class="halo ring-6"></div>
<div class="halo ring-7"></div>
<div class="halo ring-8"></div>
<div class="halo mood"></div>
</div>


<script>

	var mouseX = 0, mouseY = 0,

	windowHalfX = window.innerWidth / 2,
	windowHalfY = window.innerHeight / 2,

	// SEPARATION = 200,
	// AMOUNTX = 10,
	// AMOUNTY = 10,

	camera, scene, renderer;

	init();
	animate();

	function init() {

		var container, 
		particles, particle;

		container = document.createElement('div');
		container.setAttribute("id", "Div1")
		document.body.appendChild(container);

		scene = new THREE.Scene();
		//camera.lookAt(scene.position);
		

		//scene.position.x = 500;

		renderer = new THREE.WebGLRenderer( { antialias: true } );
		renderer.setSize( window.innerWidth, window.innerHeight );

		renderer.shadowMapEnabled = true;

		container.appendChild( renderer.domElement );

		camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 10000 );
		camera.position.z = 100;
		camera.target = scene.position;

		//---------------------------------------------------------------------------------------
		//	fog
		//---------------------------------------------------------------------------------------

		scene.fog = new THREE.Fog(0x000000, 1, 300); //1200

		//---------------------------------------------------------------------------------------
		//	light
		//---------------------------------------------------------------------------------------

		var lightAmbient = new THREE.HemisphereLight( 0x404040, 0x404040, 2 ); // soft white light
		scene.add( lightAmbient );


		var light = new THREE.PointLight( 0x66FFFF, 2, 200 );
		light.position.set( 0, 0, 50 );


		scene.add( camera );
		camera.add( light );

		//---------------------------------------------------------------------------------------
		//	particles
		//---------------------------------------------------------------------------------------

		var PI2 = Math.PI * 2;
		var material = new THREE.MeshLambertMaterial( {

			color: 0xff0000,
			program: function ( context ) {
				context.beginPath();
				context.arc( 0, 0, 1, 0, PI2, true );
				context.fill();
			}
		} );

		var geometry = new THREE.Geometry();
		var geometry2 = new THREE.SphereGeometry( 4, 32, 32 );

		var particleMaterial = new THREE.MeshLambertMaterial({ 
			color: 0xffffff,
			fog: true
		});

		ParticleGroup = new THREE.Object3D();
		for ( var i = 0; i < 100; i ++ ) {
			var particle = new THREE.Mesh( geometry2, particleMaterial );
			//particle = new THREE.Sprite( pyramidMaterial );
			particle.position.x = Math.random() * 2 - 1;
			particle.position.y = Math.random() * 2 - 1;
			particle.position.z = Math.random() * 2 - 1;
			particle.position.normalize();
			particle.position.multiplyScalar( Math.random() * 10 + 250 );
			//particle.scale.x = particle.scale.y = particle.scale.z = 1;
			ParticleGroup.add( particle );

			geometry.vertices.push( particle.position );

		}

		dust = new THREE.Object3D();
		for ( var i = 0; i < 500; i ++ ) {
			var base = new THREE.Geometry();
			var geometry3 = new THREE.SphereGeometry( .5, 10, 10 );
			var particle2 = new THREE.Mesh( geometry3, particleMaterial );
			//particle = new THREE.Sprite( pyramidMaterial );
			particle2.position.x = Math.random() * 2 - 1;
			particle2.position.y = Math.random() * 2 - 1;
			particle2.position.z = Math.random() * 2 - 1;
			particle2.position.normalize();
			particle2.position.multiplyScalar( Math.random() * (125 - 10) + 125 ); // * (max - min) + min;
			//particle2.scale.x = particle2.scale.y = particle2.scale.z = 1;
			dust.add( particle2 );

			base.vertices.push( particle2.position );

		}

		scene.add(dust);

		//---------------------------------------------------------------------------------------
		//	Lines
		//---------------------------------------------------------------------------------------

		//var line = new THREE.Line( geometry, new THREE.LineBasicMaterial( { color: 0xdddddd, opacity: .3,  transparent: true, linewidth: 2, fog: true} ) );
		var line = new THREE.Line( geometry, new THREE.LineBasicMaterial( { color: 0xffffff, opacity: .3,  transparent: true, linewidth: 2, fog: true} ) );
		//scene.add( line );

		ParticleGroup.add( line );
		scene.add( ParticleGroup );

		ParticleGroup.castShadow = true;
		ParticleGroup.receiveShadow = false;

		document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		window.addEventListener( 'resize', onWindowResize, false );

		//---------------------------------------------------------------------------------------
		//	halo
		//---------------------------------------------------------------------------------------

		// var material = new THREE.LineBasicMaterial({
		//     color: 0x0000ff
		// });

		// var radius = 5;
		// var segments = 128; //<-- Increase or decrease for more resolution I guess

		// var circleGeometry = new THREE.CircleGeometry( radius, segments );
		// circleGeometry.vertices.shift();         
		// var circle = new THREE.Line( circleGeometry, material );
		// circle.position.z = -20;
		// camera.add( circle );

	}

	function onWindowResize() {

		windowHalfX = window.innerWidth / 2;
		windowHalfY = window.innerHeight / 2;

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize( window.innerWidth, window.innerHeight );

	}

	//

	function onDocumentMouseMove(event) {

		mouseX = event.clientX - windowHalfX;
		mouseY = event.clientY - windowHalfY;

	}

	//

	function animate() {

		requestAnimationFrame( animate );
		TWEEN.update();
		render();

	}

	function render() {


		//var positions = JSON.parse( localStorage.getItem('positions') );

		// camera.position.x += ( positions.translateX - camera.position.x ) * .05;
		// camera.position.y += ( - positions.translateY + 200 - camera.position.y ) * .05;
		// camera.position.z = ( 4 - positions.scale) * 200;
		//if (localStorage.getItem('tracker')) {
			//Number.prototype.map = function ( in_min , in_max , out_min , out_max ) {
			  //return ( this - in_min ) * ( out_max - out_min ) / ( in_max - in_min ) + out_min;
			//}

			//camera.position.z = 10 - positions.scale;
			//var num=5;
			//console.log( num.map( 0 , 10 , -50 , 50 ) );
		//}

		//camera.position.z = (positions.scale - camera.position.z) * .05;
		//camera.fov += camera.fov * positions.scale;

		// camera.position.x += ( mouseX - camera.position.x ) * .05;
		// camera.position.y += ( - mouseY + 200 - camera.position.y ) * .05;

		//camera.rotation.z += ( camera.rotation.z ) * .005;

		dust.rotation.y += .0001;
		dust.rotation.x -= .0002;

		//camera.lookAt( scene.position );
		//camera.lookAt( ParticleGroup.children[0].position );

		renderer.render( scene, camera );

	}

	returnToOrigin( true );


	var person = false;
	$(window).bind('storage', function (e) {
		if (JSON.parse(localStorage.getItem('tracker')) == false && !person) {
		} else if (JSON.parse(localStorage.getItem('tracker')) == false && person) {
	    	setTimeout(function() {
	    		if (JSON.parse(localStorage.getItem('tracker')) == false) {
	    			if ( $('.content').hasClass('hidden') == false ) {
	    				returnToOrigin();
	    				console.log('really lost');
	    			}
	    			person = false;
	    		}
	    	}, 5000);
	    } else {
	    	if (person !== true) {
	    		showTutorial();
	    		person = true;
	    	}
	    }
	});

	function showTutorial () {

		happy(1);

		// var position = $('.halo').position();

		// var tween = new TWEEN.Tween(  position   )
		// 	.to( { top: 700 , left:0}, 500 )
		// 	.repeat(3)
		// 	.yoyo(true)
		// 	.easing( TWEEN.Easing.Circular.Out)
		// 	.onUpdate( function () {
		// 		$('.halo').css({top: this.top +'px', left: this.left +'px'});
		// 	} )
		// 	.start();
		// return person = true;
		// person = true;
	}

	function returnToOrigin (instant) {
			hideContent();
			if (instant) {
				size(200, 500, 0);
			} else {
				size(200, 3000, 500);
			}
			var tween = new TWEEN.Tween(camera.position).to({
				x: 0,
				y: 0,
				z: 0
			}).easing(TWEEN.Easing.Circular.InOut).onUpdate(function () {
			    camera.lookAt(camera.target);
			}).onComplete(function () {
			    camera.lookAt(ParticleGroup.children[0].position);
			}).start();

			var tween = new TWEEN.Tween(camera.target).to({
			    x: ParticleGroup.children[0].position.x,
			    y: ParticleGroup.children[0].position.y,
			    z: ParticleGroup.children[0].position.z
			}).easing(TWEEN.Easing.Circular.InOut).onUpdate(function () {
			}).onComplete(function () {
			    camera.lookAt(ParticleGroup.children[0].position);
			}).start();
	}

	function hideContent (argument) {
		$(".content").addClass('hidden');
		$(".content-body").velocity({ 
		    //opacity: 0,
		},{
			duration: 100
		});
		$('.content-body').empty();
		console.log('cleared');
	}

	function showContent (argument) {
		$(".content").removeClass('hidden');
		$(".content-body").velocity({ 
		    opacity: 1,
		}, { 
	    delay: 1400
		});
	}


	$(".one").click(function() {
		//$(".halo").velocity({ borderColorRed: '0', borderColorGreen: '0', borderColorBlue: '0', border: 10},  200, "swing").velocity("reverse", 1000);

		// var tween = new TWEEN.Tween(  { x: 50, y: 0 }  )
		// 	.to( { x: 10 y: 10}, 500 )
		// 	.repeat(3)
		// 	.yoyo(true)
		// 	.easing( TWEEN.Easing.Circular.Out)
		// 	.onUpdate( function () {
		// 		$('.halo').css({border: this.x +'px solid black'});
		// 	} )
		// 	.start();
		// returnToOrigin();
		// if (!person) {
		// 	showTutorial();
		// }
		//nope();
		returnToOrigin();
	});



	$(".two").click(function() {
		if ( $('.content').hasClass('hidden') == false ) {
			sizeTemp(400, 1400, 0);
		}
		hideContent();
		//shrink(0);
		//size(00, 400);

		var random = Math.floor(Math.random() * (100-1));

		var tween = new TWEEN.Tween(camera.target).to({
		    x: ParticleGroup.children[ random ].position.x,
		    y: ParticleGroup.children[ random ].position.y,
		    z: ParticleGroup.children[ random ].position.z
		}, 1400).easing(TWEEN.Easing.Circular.InOut).onUpdate(function () {
		}).onComplete(function () {
			camera.fov = random;
		    camera.lookAt(ParticleGroup.children[ random ].position);
		}).start();

		var tween = new TWEEN.Tween(camera.position).delay(100).to({
			x: ParticleGroup.children[ random ].position.x + 10,
			y: ParticleGroup.children[ random ].position.y,
		    z: ParticleGroup.children[ random ].position.z + 10
		}, 1800).easing(TWEEN.Easing.Exponential.InOut).onUpdate(function () {
		    camera.lookAt(camera.target);
		}).onComplete(function () {
		    camera.lookAt(ParticleGroup.children[ random ].position);
		}).start();


		size( 900,2000,700 );

		//$('.content').removeClass('hidden');
		showContent();

	});


	var oddClick = true;

	$(".three").click(function() {

		// var random = Math.floor(Math.random() * (100-1));

		// var tween = new TWEEN.Tween(camera.position).to({
		//     x: ParticleGroup.children[ random ].position.x,
		//     y: ParticleGroup.children[ random ].position.y,
		//     z: ParticleGroup.children[ random ].position.z + 10
		// }, 2000).easing(TWEEN.Easing.Quadratic.InOut).onUpdate(function () {
		//     camera.lookAt(camera.target);
		// }).onComplete(function () {
		//     camera.lookAt(ParticleGroup.children[ random ].position);
		// }).start();

		// var tween = new TWEEN.Tween(camera.target).to({
		//     x: ParticleGroup.children[ random ].position.x,
		//     y: ParticleGroup.children[ random ].position.y,
		//     z: ParticleGroup.children[ random ].position.z
		// }, 2000).easing(TWEEN.Easing.Quadratic.InOut).onUpdate(function () {
		// }).onComplete(function () {
		// 	camera.fov = random;
		//     camera.lookAt(ParticleGroup.children[ random ].position);
		// }).start();

		fogValue = oddClick ? 300 : 200;
		oddClick = !oddClick;

		var tween = new TWEEN.Tween(scene.fog).to({
		    far: fogValue
		}, 2000).easing(TWEEN.Easing.Quadratic.InOut).onUpdate(function () {
		}).onComplete(function () {
		}).start();



	});

    //---------------------------------------------------------------------------------------
    //	Speech
    //---------------------------------------------------------------------------------------

    function sentimentCheck() {
    	socket.get("/display/wit?sentence="+$('.text').val(), function (response) {
    		//console.log(	response.msg_body, response.outcome, sentence.score	);
    		//console.log(response.wit.outcome.intent, response.wit.outcome.confidence, response.sentiment.score);
    		reaction(
    			response.wit.outcome.intent, 
    			response.wit.outcome.confidence, 
    			response.sentiment.score, 
    			response.sentiment.comparative,
    			response.wit.outcome.entities
    			);
    		// console.log(response.wit.outcome.entities);
    		socket.put('/mood/5',{'value': response.sentiment.score });
    		// if (response.outcome.intent == 'ok' && response.outcome.confidence > 0.5) {
    		// 	$( ".two" ).trigger( "click" );
    		// }
    		//reaction(response.outcome.intent,response.outcome.confidence,response.outcome.confidence);
    	});
    	// socket.get("/display/ask?sentence="+$('.text').val(), function (response) { 
    	// 	console.log(	response['sentiment']	);
    	// 	if (response['sentiment'] >= 1 ) {
    	// 		$("#movement-temp").velocity({ borderColorRed: '0', borderColorGreen: '128', borderColorBlue: '255' },  200, "swing");
    	// 		$("#movement-temp").velocity({ borderColorRed: '0', borderColorGreen: '0', borderColorBlue: '0' }, { delay: 200 }, 1000, "swing");
    	// 	} else if (response['sentiment'] <= -1 ) {
    	// 		$("#movement-temp").velocity({ borderColorRed: '255', borderColorGreen: '0', borderColorBlue: '0' },  200, "swing");
    	// 		$("#movement-temp").velocity({ borderColorRed: '0', borderColorGreen: '0', borderColorBlue: '0' }, { delay: 200 }, 1000, "swing");
    	// 	}
    	// });
    }

    var recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = "en_US";
    //serviceURI = "https://www.google.com/speech-api/v1/recognize?xjerr=1&pfilter=0&client=chromium&lang=en-US",
    recognition.start();

    recognition.onresult = function (event) {
        for (var i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
                //insertAtCaret(textAreaID, event.results[i][0].transcript);
                $('.text').val(event.results[i][0].transcript);
                sentimentCheck();
            } else {
                // Outputting the interim result to the text field and adding
                // an interim result marker - 0-length space
                $('#speech-page-content').val(event.results[i][0].transcript + '\u200B');
                // insertAtCaret(textAreaID, event.results[i][0].transcript + '\u200B');
                // interimResult += event.results[i][0].transcript + '\u200B';
            }
        }
    };
    recognition.onend = function() {
    	if (toggleSpeech) {
    		recognition.start();
    		console.log('restarted voice recognition...');
    	}
    };


	//---------------------------------------------------------------------------------------
	//	Toggle stats
	//---------------------------------------------------------------------------------------


    var toggleStats = false;

    $(document).keypress(function(event) {
        if (event.which == 32) {
        	$('.stats').toggleClass('hidden');
            // $('.stats').css({opacity: toggleStats ? '0' : '1'});
            // toggleStats = !toggleStats;
        }
    });

	//---------------------------------------------------------------------------------------
	//	Toggle speech
	//---------------------------------------------------------------------------------------


    var toggleSpeech = true;

    $(document).keypress(function(event) {
        if (event.which == 115) {
            toggleSpeech ? recognition.stop() : recognition.start();
            toggleSpeech = !toggleSpeech;
        }
    });

</script>