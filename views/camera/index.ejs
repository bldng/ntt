<section style="width:49%; display:inline-block; position:absolute;">
  <div>
    <h1>Values</h1>
    <button id="postMessageButton">Update</button>
    <div id="values"></div>
    
    <h2>Static collection:</h2>
    <ul>
      <% _.each(corndogs, function (corndog) { %>
      <li><%= corndog.name %></li>
      <% }) %>
    </ul>
  </div>
</section>


<section style="width:49%; display:inline-block; position:absolute; right:0;">
<h1>Camera</h1> 
<div id="content">
  <div id="container">
    <video id="videoel" width="400" height="300" preload="auto" loop="" src=""></video>
  <canvas id="overlay" width="400" height="300"></canvas>
  <!-- <canvas id="sketch" width="400" height="300"></canvas> -->
  <div id="emotion_container">
    <div id="emotion_icons">
      <img class="emotion_icon" id="icon1" src="/js/camera/icon_angry.png">
      <img class="emotion_icon" id="icon2" src="/js/camera/icon_sad.png">
      <img class="emotion_icon" id="icon3" src="/js/camera/icon_surprised.png">
      <img class="emotion_icon" id="icon4" src="/js/camera/icon_happy.png">
    </div>
    <div id="emotion_chart"></div>
  </div>
<!--   <div id="controls">
    <input class="btn" type="button" value="start" onclick="startVideo()" id="startbutton">
  </div> -->
</div><canvas width="11px" height="781px" id="renderCanvas" style="display:none;"></canvas>
</section>


<script>
    var MessageModel = Backbone.Model.extend({
        urlRoot: '/mood',
    });

    var SailsCollection = Backbone.Collection.extend({
        sailsCollection: "",
        socket: null,
        sync: function(method, model, options){
            var where = {};
            if (options.where) {
                where = {
                    where: options.where
                }
            }
            if(typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                this.socket = io.connect();
                this.socket.on("connect", _.bind(function(){
                    this.socket.request("/" + this.sailsCollection, where, _.bind(function(users){
                        this.set(users);
                    }, this));

                    this.socket.on("message", _.bind(function(msg){
                        // var m = msg.uri.split("/").pop();
                        // In v0.9.0 the REST method is now stored in the messages verb property
                        var m = msg.verb;
                        if (m === "create") {
                            this.add(msg.data);
                        } else if (m === "update") {
                            //this.get(msg.data.id).set(msg.data);
                            // In v0.9.0 the message id property is no longer stored in the data object.
                            this.get(msg.id).set(msg.data);
                            //console.log(msg.data);
                        } else if (m === "destroy") {
                            // this.remove(this.get(msg.data.id));
                            this.remove(this.get(msg.id));
                        }
                    }, this));
                }, this));
            } else {
                console.log("Error: Cannot retrieve models because property 'sailsCollection' not set on the collection");
            }
        }
    });

    var MessageCollection = SailsCollection.extend({
        sailsCollection: 'mood',
        model: MessageModel,
    });

    var messages = new MessageCollection();
    messages.fetch();

    _.templateSettings = {
        interpolate : /\{\{(.+?)\}\}/g
    };

    var MessagesView = Backbone.View.extend({
        el: '#values',
        initialize: function () {
            this.collection.on('change:value add', this.render, this);
            this.render();
        },
        template: _.template("<div><p><b>{{ name }}: </b>{{ value }}</p></div>"),
        render: function () {
                this.$el.html("");
                this.collection.each(function(msg){
                    this.$el.append(this.template(msg.toJSON()));
                }, this)
        }
    });

    var mView = new MessagesView({collection: messages});

    $("#postMessageButton").click(function(){
        socket.get("/mood/1", function (response) { 
            socket.put('/mood/1',{'value': parseInt(response.value)+1});
        });
    });

    $(document).ready(function () {
        //console.log('works');
        startVideo();
        // updateValues('SmileTest');
    });

    function updateValues(name) {
        var tempurl = "/mood/?name="+name;
        socket.get("/mood/?name="+name, function (response) { 
            console.log(response[0].id);
            socket.put('/mood/'+response[0].id,{'value': parseInt(response[0].value)+1});
        });
    }

    var vid = document.getElementById('videoel');
    var overlay = document.getElementById('overlay');
    var overlayCC = overlay.getContext('2d');

    /********** check and set up video/webcam **********/

    function enablestart() {
        var startbutton = document.getElementById('startbutton');
        startbutton.value = "start";
        startbutton.disabled = null;
    }

    /*var insertAltVideo = function(video) {
        if (supports_video()) {
            if (supports_ogg_theora_video()) {
                video.src = "../media/cap12_edit.ogv";
            } else if (supports_h264_baseline_video()) {
                video.src = "../media/cap12_edit.mp4";
            } else {
                return false;
            }
            //video.play();
            return true;
        } else return false;
    }*/
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;

    // check for camerasupport
    if (navigator.getUserMedia) {
        // set up stream
        
        var videoSelector = {video : true};
        if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
            var chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
            if (chromeVersion < 20) {
                videoSelector = "video";
            }
        };

        navigator.getUserMedia(videoSelector, function( stream ) {
            if (vid.mozCaptureStream) {
                vid.mozSrcObject = stream;
            } else {
                vid.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
            }
            vid.play();
        }, function() {
            //insertAltVideo(vid);
            alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
        });
    } else {
        //insertAltVideo(vid);
        alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
    }

    vid.addEventListener('canplay', enablestart, false);

    /*********** setup of emotion detection *************/

    var ctrack = new clm.tracker({useWebGL : true});
    ctrack.init(pModel);

    function startVideo() {
        // start video
        vid.play();
        // start tracking
        ctrack.start(vid);
        // start loop to draw face
        drawLoop();
    }

    function drawLoop() {
        requestAnimFrame(drawLoop);
        overlayCC.clearRect(0, 0, 400, 300);
        //psrElement.innerHTML = "score :" + ctrack.getScore().toFixed(4);
        if (ctrack.getCurrentPosition()) {
            ctrack.draw(overlay);
        }
        var cp = ctrack.getCurrentParameters();
        
        var er = ec.meanPredict(cp);
        if (er) {
            updateData(er);
            for (var i = 0;i < er.length;i++) {
                if (er[i].value > 0.4) {
                    document.getElementById('icon'+(i+1)).style.visibility = 'visible';
                } else {
                    document.getElementById('icon'+(i+1)).style.visibility = 'hidden';
                }
            }
        }
    }

    var ec = new emotionClassifier();
    ec.init(emotionModel);
    var emotionData = ec.getBlank();

    /************ d3 code for barchart *****************/

    var margin = {top : 20, right : 20, bottom : 10, left : 40},
        width = 400 - margin.left - margin.right,
        height = 100 - margin.top - margin.bottom;

    var barWidth = 30;

    var formatPercent = d3.format(".0%");

    var x = d3.scale.linear()
        .domain([0, ec.getEmotions().length]).range([margin.left, width+margin.left]);

    var y = d3.scale.linear()
        .domain([0,1]).range([0, height]);

    var svg = d3.select("#emotion_chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)

    svg.selectAll("rect").
      data(emotionData).
      enter().
      append("svg:rect").
      attr("x", function(flexibleValue, index) { return x(index); }).
      attr("y", function(flexibleValue) { return height - y(flexibleValue.value); }).
      attr("height", function(flexibleValue) { return y(flexibleValue.value); }).
      attr("width", barWidth).
      attr("fill", "#2d578b");

    svg.selectAll("text.labels").
      data(emotionData).
      enter().
      append("svg:text").
      attr("x", function(flexibleValue, index) { return x(index) + barWidth; }).
      attr("y", function(flexibleValue) { return height - y(flexibleValue.value); }).
      attr("dx", -barWidth/2).
      attr("dy", "1.2em").
      attr("text-anchor", "middle").
      text(function(flexibleValue) { return flexibleValue.value;}).
      attr("fill", "white").
      attr("class", "labels");

    svg.selectAll("text.yAxis").
      data(emotionData).
      enter().append("svg:text").
      attr("x", function(flexibleValue, index) { return x(index) + barWidth; }).
      attr("y", height).
      attr("dx", -barWidth/2).
      attr("text-anchor", "middle").
      attr("style", "font-size: 12").
      text(function(flexibleValue) { return flexibleValue.emotion;}).
      attr("transform", "translate(0, 18)").
      attr("class", "yAxis");

    function updateData(data) {
        // update
        var rects = svg.selectAll("rect")
            .data(data)
            .attr("y", function(flexibleValue) { return height - y(flexibleValue.value); })
            .attr("height", function(flexibleValue) { return y(flexibleValue.value); });
        var texts = svg.selectAll("text.labels")
            .data(data)
            .attr("y", function(flexibleValue) { return height - y(flexibleValue.value); })
            .text(function(flexibleValue) { return flexibleValue.value.toFixed(1);});

        // enter 
        rects.enter().append("svg:rect");
        texts.enter().append("svg:text");
        //console.log(data[0].value);

        if (data[0].value > .7){
            console.log('angry');
            updateValues('Angry');
            // read value set value++

            //document.getElementById('movement-temp').style.background= 'red';
        } else if (data[3].value > .7){
            console.log('happy');
            updateValues('Smile');
            //document.getElementById('movement-temp').style.background= 'green';
        } 
        // else if (data[1].value > .7){
        //     console.log('sad');
        //     updateValues('Sad');
        // } 
        else {
            //document.getElementById('movement-temp').style.background= 'white';
        }


        // exit
        rects.exit().remove();
        texts.exit().remove();


        // var positions = JSON.parse( localStorage.getItem('positions') );
        // //console.log( positions.translateX);
        // document.getElementById('movement-temp').style.top= positions.translateY + 'px';
        // document.getElementById('movement-temp').style.left= 500 + (positions.translateX*-1) + 'px';
        // document.getElementById('movement-temp').style.webkitTransform = "scale("+positions.scale+")";

    }

    /******** stats ********/

    stats = new Stats();
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    document.getElementById('container').appendChild( stats.domElement );

    // update stats on every iteration
    document.addEventListener('clmtrackrIteration', function(event) {
        stats.update();
    }, false);
</script>

